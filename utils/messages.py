import re


def build_access_request_message(
    user: dict, role_name: str, target_area: str | None = None
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–∞.

    :param user: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param role_name: —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Ä–æ–ª–∏
    :param target_area: —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    """
    text = (
        f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user['full_name']}</b> –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–æ–ª—å <b>{role_name}</b>"
    )
    if target_area:
        text += f" –¥–ª—è <b>{target_area}</b>"
    text += f".\n\nTelegram: @{user.get('username') or '‚Äî'}"
    return text


def format_housing_office_block(jeu) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ —Å—Ç—Ä–æ–∫—É ('–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'), –ª–∏–±–æ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ñ–≠–£.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∏–Ω—Ñ–æ –æ –¥–æ–º–µ.
    """
    if not jeu or jeu == "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
        return "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—Å—Ç–∞–≤–∏–ª)
    if isinstance(jeu, str):
        return jeu

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å/–æ–±—ä–µ–∫—Ç
    parts = []
    if jeu.get("name"):
        parts.append(f"<b>{jeu['name']}</b>")
    if jeu.get("address"):
        parts.append(f"üìç {jeu['address']}")
    if jeu.get("phone"):
        parts.append(f"‚òéÔ∏è {jeu['phone']}")
    if jeu.get("working_hours"):
        parts.append(f"‚è∞ {jeu['working_hours']}")
    if jeu.get("comments"):
        parts.append(f"üí¨ {jeu['comments']}")
    if not parts:
        return "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    return "\n".join(parts)


def build_parsed_house_info(
    parsed_data: dict,
    db_city_name: str,
    db_zone_name: str,
    notes: str = None,
    updated_at: str = None,
    jeu_address: str = "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
) -> str:
    # –ê–¥—Ä–µ—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    address = parsed_data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    title = parsed_data.get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    floors_text = parsed_data.get("floors", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    entrances_text = parsed_data.get("entrances", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    apartments_list = parsed_data.get("apartments", [])

    # –ü–∞—Ä—Å–∏–º —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä
    street_match = re.search(r"^(.*?)\s+(\S+)$", title)
    if street_match:
        street = street_match.group(1).strip()
        house_number = street_match.group(2).strip()
    else:
        street = title
        house_number = ""

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
    entrances_match = re.search(r"(\d+)", entrances_text)
    entrances_count = int(entrances_match.group(1)) if entrances_match else 1

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
    floors_match = re.search(r"(\d+)", floors_text)
    floors_count = int(floors_match.group(1)) if floors_match else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –†–∞–∑–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –ø–æ–¥—ä–µ–∑–¥–∞–º
    entrances_info = {}
    for item in apartments_list:
        apt_match = re.match(r"(\d+) –ø–æ–¥—ä–µ–∑–¥: –∫–≤–∞—Ä—Ç–∏—Ä—ã (.+)", item)
        if apt_match:
            entrance_number = int(apt_match.group(1))
            flats = apt_match.group(2).strip()
            entrances_info[entrance_number] = flats

    # –°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
    text = (
        f"üè† <b>–î–æ–º:</b>\n"
        f"{db_city_name}, {db_zone_name}, {street} {house_number}\n\n"
        f"üè¢ <b>–≠—Ç–∞–∂–µ–π:</b> {floors_count}\n"
        f"üö™ <b>–ü–æ–¥—ä–µ–∑–¥–æ–≤:</b> {entrances_count}\n\n"
    )

    if entrances_info:
        for entrance_number in sorted(entrances_info.keys()):
            text += (
                f"üö™ <b>–ü–æ–¥—ä–µ–∑–¥ {entrance_number}</b>: "
                f"{floors_count} —ç—Ç–∞–∂–µ–π, –∫–≤–∞—Ä—Ç–∏—Ä—ã {entrances_info[entrance_number]}\n"
            )
    else:
        text += "üö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—ä–µ–∑–¥–∞—Ö.\n"

    text += (
        f"\nüè¢ <b>–ñ–≠–£:</b>\n{format_housing_office_block(jeu_address)}\n"
        f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {notes or '–ù–µ—Ç'}\n"
        f"üïì <b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> {updated_at or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )

    return text


def build_house_address_info(
    *,
    city_name: str,
    zone_name: str,
    street: str,
    house_number: str,
    floors: int,
    entrances: int,
    entrance_info: dict[int, str] = None,
    jeu_address: str = "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    notes: str = None,
    updated_at: str = None,
) -> str:
    text = (
        f"üè† <b>–î–æ–º:</b>\n"
        f"{city_name}, {zone_name}, {street} {house_number}\n\n"
        f"üè¢ <b>–≠—Ç–∞–∂–µ–π:</b> {floors}\n"
        f"üö™ <b>–ü–æ–¥—ä–µ–∑–¥–æ–≤:</b> {entrances}\n\n"
    )

    if entrance_info:
        for entrance_number in sorted(entrance_info.keys()):
            flats = entrance_info[entrance_number]
            text += f"üö™ <b>–ü–æ–¥—ä–µ–∑–¥ {entrance_number}</b>: {floors} —ç—Ç–∞–∂–µ–π, –∫–≤–∞—Ä—Ç–∏—Ä—ã {flats}\n"
    else:
        text += "üö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—ä–µ–∑–¥–∞—Ö.\n"

    text += (
        f"\nüè¢ <b>–ñ–≠–£:</b>\n{format_housing_office_block(jeu_address)}\n"
        f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {notes or '–ù–µ—Ç'}\n"
        f"üïì <b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> {updated_at or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )

    return text
