from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from db.crud.areas import get_area_by_id
from db.crud.branches import get_branch_by_id
from db.crud.users import (
    get_rgks_by_area,
    get_rn_by_branch,
    get_super_admin,
    get_user_by_id,
    set_user_role,
)
from db.db import async_session
from fsm.states import AccessRequest
from keyboards.inline import build_approval_keyboard, select_role_keyboard
from utils.messages import build_access_request_message

router = Router()

ROLES = {
    "role_rn": 1,  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    "role_rgks": 2,  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã –ö–°
    "role_si": 3,  # –°—Ç–∞—Ä—à–∏–π –∏–Ω–∂–µ–Ω–µ—Ä
}


@router.callback_query(F.data == "request_access")
async def start_access(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AccessRequest.selecting_role)
    await callback.message.answer(
        "üë§ –ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?", reply_markup=select_role_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.in_(ROLES.keys()))
async def handle_role_selection(callback: CallbackQuery, state: FSMContext):
    role_id = ROLES[callback.data]
    await state.update_data(role_id=role_id)
    await state.set_state(AccessRequest.entering_area)
    await callback.message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>16.2</code>) "
        "–∏–ª–∏ —Ñ–∏–ª–∏–∞–ª–∞ (<code>16</code>) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏:"
    )
    await callback.answer()


@router.message(AccessRequest.entering_area)
async def handle_area_input(message: Message, state: FSMContext):
    data = await state.get_data()
    role_id = data["role_id"]

    async with async_session() as session:
        user = await get_user_by_id(session, message.from_user.id)
        await state.clear()

        if user is None:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            )
            return

        area_input = message.text.strip()

        # –ó–∞–ø—Ä–æ—Å –æ—Ç –†–ù ‚Üí —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
        if role_id == ROLES["role_rn"]:
            branch = await get_branch_by_id(session, area_input)
            if not branch:
                await message.answer("‚ùå –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            admin = await get_super_admin(session)
            if admin:
                await message.bot.send_message(
                    chat_id=admin.id,
                    text=build_access_request_message(user, "–†–ù", area_input),
                    reply_markup=build_approval_keyboard(user.id, role_id, area_input),
                )
                await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            else:
                await message.answer("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ó–∞–ø—Ä–æ—Å –æ—Ç –†–ì–ö–° ‚Üí –†–ù
        elif role_id == ROLES["role_rgks"]:
            area = await get_area_by_id(session, area_input)
            if not area:
                await message.answer("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            branch_id = area_input.split(".")[0]
            target = await get_rn_by_branch(session, branch_id)
            if target:
                await message.bot.send_message(
                    chat_id=target.id,
                    text=build_access_request_message(user, "–†–ì–ö–°", area_input),
                    reply_markup=build_approval_keyboard(user.id, role_id, area_input),
                )
                await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            else:
                await message.answer("‚ö†Ô∏è –†–ù —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ó–∞–ø—Ä–æ—Å –æ—Ç –°–ò ‚Üí –†–ì–ö–°
        elif role_id == ROLES["role_si"]:
            area = await get_area_by_id(session, area_input)
            if not area:
                await message.answer("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            target = await get_rgks_by_area(session, area_input)
            if target:
                await message.bot.send_message(
                    chat_id=target.id,
                    text=build_access_request_message(user, "–°–ò", area_input),
                    reply_markup=build_approval_keyboard(user.id, role_id, area_input),
                )
                await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.")
            else:
                await message.answer("‚ö†Ô∏è –†–ì–ö–° —É—á–∞—Å—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):
    _, user_id, role_id, area = callback.data.split(":")
    user_id, role_id = int(user_id), int(role_id)

    async with async_session() as session:
        await set_user_role(session, user_id, role_id, area)

    await callback.message.edit_text("‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω.")
    await callback.bot.send_message(user_id, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω–∞!")


@router.callback_query(F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    _, user_id, *_ = callback.data.split(":")
    user_id = int(user_id)

    await callback.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.bot.send_message(user_id, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
