from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from fsm.states import AccessRequest
from db.db import db
from keyboards.inline import select_role_keyboard
from keyboards.inline import build_approval_keyboard
from utils.messages import build_access_request_message


router = Router()

SUPER_ADMIN_ROLE = 0
ROLES = {
    "role_rn": 1,
    "role_rgks": 2,
    "role_si": 3,
}

@router.callback_query(F.data == "request_access")
async def start_access(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AccessRequest.selecting_role)
    await callback.message.answer("üë§ –ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?", reply_markup=select_role_keyboard())
    await callback.answer()


@router.callback_query(F.data.in_(ROLES.keys()))
async def handle_role_selection(callback: CallbackQuery, state: FSMContext):
    role_key = callback.data
    role_id = ROLES[role_key]
    await state.update_data(role_id=role_id)

    await state.set_state(AccessRequest.entering_area)
    await callback.message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>16.2</code>) –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª–∞ (<code>16</code>) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏:")
    await callback.answer()


@router.message(AccessRequest.entering_area)
async def handle_area_input(message: Message, state: FSMContext):
    data = await state.get_data()
    role_id = data["role_id"]
    user = await db.fetchone("SELECT * FROM users WHERE id = %s", (message.from_user.id,))
    await state.clear()

    area_input = message.text.strip()

    # –ó–∞–ø—Ä–æ—Å –æ—Ç –†–ù (—Ä–æ–ª—å 1) ‚Üí –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    if role_id == 1:
        exists = await db.fetchone("SELECT * FROM branches WHERE id = %s", (area_input,))
        if not exists:
            await message.answer("‚ùå –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        admin = await db.fetchone("SELECT id FROM users WHERE role_id = %s", (SUPER_ADMIN_ROLE,))
        if admin:
            await message.bot.send_message(
                chat_id=admin["id"],
                text=build_access_request_message(user, "–†–ù", area_input),
                reply_markup=build_approval_keyboard(user["id"], role_id, area_input)
            )
            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await message.answer("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–ø—Ä–æ—Å –æ—Ç –†–ì–ö–° (2) ‚Üí –†–ù
    elif role_id == 2:
        exists = await db.fetchone("SELECT * FROM areas WHERE id = %s", (area_input,))
        if not exists:
            await message.answer("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        branch_id = area_input.split(".")[0]
        target = await db.fetchone("SELECT id FROM users WHERE branch_id = %s AND role_id = 1", (branch_id,))
        if target:
            await message.bot.send_message(
                chat_id=target["id"],
                text=build_access_request_message(user, "–†–ì–ö–°", area_input),
                reply_markup=build_approval_keyboard(user["id"], role_id, area_input)
            )
            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        else:
            await message.answer("‚ö†Ô∏è –†–ù —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–ø—Ä–æ—Å –æ—Ç –°–ò (3) ‚Üí –†–ì–ö–°
    elif role_id == 3:
        exists = await db.fetchone("SELECT * FROM areas WHERE id = %s", (area_input,))
        if not exists:
            await message.answer("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        target = await db.fetchone("SELECT id FROM users WHERE area_id = %s AND role_id = 2", (area_input,))
        if target:
            await message.bot.send_message(
                chat_id=target["id"],
                text=build_access_request_message(user, "–°–ò", area_input),
                reply_markup=build_approval_keyboard(user["id"], role_id, area_input)
            )
            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.")
        else:
            await message.answer("‚ö†Ô∏è –†–ì–ö–° —É—á–∞—Å—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


router.callback_query(F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):
    _, user_id, role_id, area = callback.data.split(":")
    user_id, role_id = int(user_id), int(role_id)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∏ —É—á–∞—Å—Ç–æ–∫/—Ñ–∏–ª–∏–∞–ª
    await db.execute("""
        UPDATE users 
        SET role_id = %s, 
            area_id = %s, 
            is_active = TRUE 
        WHERE id = %s
    """, (role_id, area, user_id))

    await callback.message.edit_text("‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω.")
    await callback.bot.send_message(user_id, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω–∞!")

@router.callback_query(F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    _, user_id, role_id, area = callback.data.split(":")
    user_id = int(user_id)

    await callback.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.bot.send_message(user_id, "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")