from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from db.db import async_session
from db.crud.users import get_user_by_id, create_user
from db.crud.roles import get_role_name

from keyboards.inline import request_access_keyboard, build_main_menu

router = Router()

NEWBIE_ROLE_ID = 50

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def process_start(user_id, full_name, username, send_func):
    session: AsyncSession
    async with async_session() as session:
        user = await get_user_by_id(session, user_id)
        role_name = await get_role_name(session, user.role_id) if user else None

        match user:
            case None:
                await create_user(
                    session=session,
                    user_id=user_id,
                    full_name=full_name,
                    username=username,
                    role_id=NEWBIE_ROLE_ID,
                )
                await send_func(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>–Ω–æ–≤–∏—á–æ–∫</b>.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                    reply_markup=request_access_keyboard(),
                )
            case _ if user.role_id in (0, 1, 2, 3):
                await send_func(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
                    f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>{role_name}</b>.",
                    reply_markup=build_main_menu(user.role_id),
                )
            case _ if user.role_id == NEWBIE_ROLE_ID:
                await send_func(
                    f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å.",
                    reply_markup=request_access_keyboard(),
                )
            case _:
                await send_func(
                    "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

# –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
@router.message(CommandStart())
async def handle_start(message: Message):
    await process_start(
        user_id=message.from_user.id,
        full_name=message.from_user.full_name,
        username=message.from_user.username,
        send_func=message.answer,
    )

# –°—Ç–∞—Ä—Ç –ø–æ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback_data="start")
@router.callback_query(lambda c: c.data == "start")
async def handle_start_callback(callback: CallbackQuery):
    await process_start(
        user_id=callback.from_user.id,
        full_name=callback.from_user.full_name,
        username=callback.from_user.username,
        send_func=callback.message.edit_text,
    )
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏

