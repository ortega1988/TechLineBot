from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from fsm.states import AddHousingOffice2GISFSM
from db.db import async_session
from db.crud.housing_offices import create_housing_office
from db.crud.users import get_user_by_id
from db.crud.cities import get_city_by_id
from utils.parser import parse_housing_office_from_2gis
from utils.address import resolve_city_zone_from_comment
from db.crud.zones import get_zones_by_area, get_zones_by_city
from keyboards.inline import get_admin_menu
from keyboards.inline import get_confirm_add_housing_office_keyboard


router = Router()

@router.callback_query(F.data == "add_housing_office")
async def start_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–≠–£</b> –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ 2–ì–ò–°:")
    await state.set_state(AddHousingOffice2GISFSM.waiting_for_name)
    await callback.answer()

@router.message(AddHousingOffice2GISFSM.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        user = await get_user_by_id(session, user_id)
        if not user or not user.default_city_id:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await state.clear()
            return

        city = await get_city_by_id(session, user.default_city_id)
        if not city:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        city_url = city.url
        name = message.text.strip()

        await message.answer(f"üîé –ò—â–µ–º –ñ–≠–£ <b>{name}</b> –≤ –≥–æ—Ä–æ–¥–µ <b>{city.name}</b> —á–µ—Ä–µ–∑ 2–ì–ò–°...")

        result = await parse_housing_office_from_2gis(city_url=city_url, org_name=name)
        if not result:
            await message.answer("‚ùå –ñ–≠–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ 2–ì–ò–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        # –ù–∞–π—Ç–∏ —Ä–∞–π–æ–Ω –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å!
        zones = await get_zones_by_city(session, city.id)
        zone_obj = next(
            (zone for zone in zones if zone.name.lower() in result.get("comments", "").lower()),
            None
        )
        if not zone_obj:
            await message.answer(
                "‚ùå –†–∞–π–æ–Ω (–∑–æ–Ω–∞) –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —ç—Ç–æ—Ç —Ä–∞–π–æ–Ω, –∞ –ø–æ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ñ–≠–£."
            )
            await state.clear()
            return
        city_name = city.name
        zone_name = zone_obj.name
        parsed_address = result["address"]  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–ª–∏—Ü–∞ –ê–¥–æ—Ä–∞—Ç—Å–∫–æ–≥–æ, 12–∞, 1 —ç—Ç–∞–∂"

        # –¢—ã–¥–µ–ª–∏ –∏–∑ address —Ç–æ–ª—å–∫–æ —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –∏ —ç—Ç–∞–∂ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ split –∏ join)
        address_parts = [city_name, zone_name] + [x.strip() for x in parsed_address.split(",")]
        formatted_address = ", ".join(address_parts)  # –ö–∞–∑–∞–Ω—å, –ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π, –£–ª–∏—Ü–∞ –ê–¥–æ—Ä–∞—Ç—Å–∫–æ–≥–æ, 12–∞, 1 —ç—Ç–∞–∂

        # –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ —ç—Ç–æ:
        comments = "–î–æ–±–∞–≤–ª–µ–Ω–æ —Å 2–ì–ò–°"

        # –û–±–Ω–æ–≤–ª—è–µ–º state —Å zone_id
        await state.update_data(parsed=result, city_id=city.id, zone_id=zone_obj.id)
        text = (
            f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['title']}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {formatted_address}\n"
            f"üó∫ <b>–†–∞–π–æ–Ω (–∑–æ–Ω–∞):</b> {zone_name}\n"
            f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {result['phone'] or '‚Äî'}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {result['working_hours'] or '‚Äî'}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {comments}"
        )
        await message.answer(text, reply_markup=get_confirm_add_housing_office_keyboard())
        await state.set_state(AddHousingOffice2GISFSM.confirming_add)


@router.callback_query(AddHousingOffice2GISFSM.confirming_add, F.data == "add_housing_office_confirm")
async def confirm_add(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    result = data["parsed"]

    async with async_session() as session:
        user = await get_user_by_id(session, callback.from_user.id)
        city_id, zone_id = await resolve_city_zone_from_comment(session, user, result.get("comments", ""))

        if not city_id or not zone_id:
            await state.clear()
            await callback.answer()
            return

        await create_housing_office(
            session=session,
            name=result.get("title", ""),
            address=result.get("address", ""),
            city_id=city_id,
            zone_id=zone_id,
            comments="–¥–æ–±–∞–≤–ª–µ–Ω–æ —Å 2–ì–ò–°",
            working_hours=result.get("working_hours", ""),
            phone=result.get("phone", ""),
            email="",       # –µ—Å–ª–∏ email –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è
            photo_url="",   # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è
        )
    await callback.message.edit_text("‚úÖ –ñ–≠–£ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_admin_menu())
    await state.clear()
    await callback.answer()
