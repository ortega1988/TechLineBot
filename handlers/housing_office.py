from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from fsm.states import AddHousingOffice2GISFSM
from db.db import async_session
from db.crud.housing_offices import create_housing_office
from db.crud.users import get_user_by_id
from db.crud.zones import get_zone_by_area
from db.models import City
from utils.parser import parse_housing_office_from_2gis
from keyboards.inline import get_admin_menu
from keyboards.inline import get_confirm_add_housing_office_keyboard

router = Router()

@router.callback_query(F.data == "add_housing_office")
async def start_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–≠–£</b> –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ 2–ì–ò–°:")
    await state.set_state(AddHousingOffice2GISFSM.waiting_for_name)
    await callback.answer()

@router.message(AddHousingOffice2GISFSM.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        user = await get_user_by_id(session, user_id)
        if not user or not user.area_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—á–∞—Å—Ç–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –∏ –≥–æ—Ä–æ–¥ –ø–æ area –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        zone = await get_zone_by_area(session, user.area_id)
        if not zone or not zone.city:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–µ–º—É —É—á–∞—Å—Ç–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        city: City = zone.city
        city_url = city.url
        name = message.text.strip()

        await message.answer(f"üîé –ò—â–µ–º –ñ–≠–£ <b>{name}</b> –≤ –≥–æ—Ä–æ–¥–µ <b>{city.name}</b> —á–µ—Ä–µ–∑ 2–ì–ò–°...")

        result = await parse_housing_office_from_2gis(city_url=city_url, org_name=name)
        if not result:
            await message.answer("‚ùå –ñ–≠–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ 2–ì–ò–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        await state.update_data(parsed=result)
        text = (
            f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['title']}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {result['address']}\n"
            f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {result['phone'] or '‚Äî'}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {result['working_hours'] or '‚Äî'}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {result['comments'] or '‚Äî'}"
        )
        await message.answer(text, reply_markup=get_confirm_add_housing_office_keyboard())
        await state.set_state(AddHousingOffice2GISFSM.confirming_add)

@router.callback_query(AddHousingOffice2GISFSM.confirming_add, F.data == "add_housing_office_confirm")
async def confirm_add(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    result = data["parsed"]

    async with async_session() as session:
        await create_housing_office(
            session=session,
            name=result.get("title", ""),
            address=result.get("address", ""),
            comments=result.get("comments", ""),
            working_hours=result.get("working_hours", ""),
            phone=result.get("phone", ""),
        )
    await callback.message.edit_text("‚úÖ –ñ–≠–£ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_admin_menu())
    await state.clear()
    await callback.answer()
