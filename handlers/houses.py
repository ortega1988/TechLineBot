from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from fsm.states import FindHouseFSM
from db.db import async_session
from db.crud.users import get_user_by_id
from db.crud.houses import get_house_by_address, create_house_with_entrances, get_entrances_by_house
from db.crud.zones import get_zone_by_area
from keyboards.inline import get_list_gks_menu, get_confirm_add_keyboard
from utils.messages import build_house_address_info
from utils.parser import parse_house_from_2gis
from utils.address import detect_city_and_zone_by_address

from datetime import datetime
import re

router = Router()


@router.callback_query(F.data == "find_house")
async def start_find_house(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    async with async_session() as session:
        user = await get_user_by_id(session, user_id)

        if user is None or not user.area_id:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω —É—á–∞—Å—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await callback.answer()
            return

        zone = await get_zone_by_area(session, user.area_id)

        if zone is None:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –ø–æ –≤–∞—à–µ–º—É —É—á–∞—Å—Ç–∫—É.")
            await callback.answer()
            return

        await state.update_data(
            area_id=user.area_id,
            city=zone.city,
            zone_name=zone.name
        )

    await callback.message.answer(
        "üèò –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–£–ª–∏—Ü–∞ –ù–æ–º–µ—Ä</b> (–ø—Ä–∏–º–µ—Ä: <b>–¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 4</b> –∏–ª–∏ <b>–õ–µ–Ω–∏–Ω–∞ 5–ê</b>)"
    )
    await state.set_state(FindHouseFSM.waiting_for_address)
    await callback.answer()


@router.message(FindHouseFSM.waiting_for_address)
async def input_address(message: Message, state: FSMContext):
    data = await state.get_data()
    area_id = data["area_id"]

    parts = message.text.replace(",", " ").split()

    if len(parts) < 2:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–í–≤–µ–¥–∏—Ç–µ <b>—É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <b>–¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 4</b>"
        )
        return

    street = " ".join(parts[:-1])
    house_number = parts[-1]

    async with async_session() as session:
        house = await get_house_by_address(
            session,
            city=data["city"],
            area_id=area_id,
            street=street,
            house_number=house_number
        )

        if house is None:
            await message.answer("üîç –î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∏—â–µ–º –≤ 2–ì–ò–°...")

            info = await parse_house_from_2gis(
                city_url=data["city"].url,
                search_query=f"{street} {house_number}"
            )

            if info is None:
                await message.answer("‚ùå –î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 2–ì–ò–°.")
                await state.clear()
                return

            city, zone = await detect_city_and_zone_by_address(session, info.get("address", ""))

            if city is None:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∞–¥—Ä–µ—Å—É.")
                await state.clear()
                return

            if zone is None:
                await message.answer(f"üèôÔ∏è –ì–æ—Ä–æ–¥ {city.name} –Ω–∞–π–¥–µ–Ω, —Ä–∞–π–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            else:
                await message.answer(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city.name}, —Ä–∞–π–æ–Ω: {zone.name}")

            # –†–∞–∑–±–æ—Ä title –¥–ª—è —É–ª–∏—Ü—ã –∏ –Ω–æ–º–µ—Ä–∞
            title = info.get('title', '')
            if ',' in title:
                street_part, number_part = title.rsplit(',', 1)
                parsed_street = street_part.replace('–£–ª–∏—Ü–∞', '').strip()
                parsed_house_number = number_part.strip()
            else:
                parsed_street = street
                parsed_house_number = house_number

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
            entrances_match = re.search(r'(\d+)', info.get('entrances', ''))
            entrances_count = int(entrances_match.group(1)) if entrances_match else 1

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            floors_match = re.search(r'(\d+)', info.get('floors', ''))
            floors_count = int(floors_match.group(1)) if floors_match else 1

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥—ä–µ–∑–¥–∞–º
            entrance_info = {}
            for item in info.get('apartments', []):
                parts = item.split(": –∫–≤–∞—Ä—Ç–∏—Ä—ã ")
                if len(parts) == 2:
                    entrance_number = int(parts[0].split()[0])
                    flats = parts[1].strip()
                    entrance_info[entrance_number] = flats

            text = build_house_address_info(
                city_name=city.name,
                zone_name=zone.name if zone else '–ë–µ–∑ —Ä–∞–π–æ–Ω–∞',
                street=parsed_street,
                house_number=parsed_house_number,
                floors=floors_count,
                entrances=entrances_count,
                entrance_info=entrance_info,
                notes="–î–æ–±–∞–≤–ª–µ–Ω–æ —Å 2–ì–ò–°",
                updated_at=datetime.now().strftime("%d.%m.%Y %H:%M")
            )

            await message.answer(text, reply_markup=get_confirm_add_keyboard())

            await state.update_data(
                parsed_house={
                    "street": parsed_street,
                    "house_number": parsed_house_number,
                    "floors": floors_count,
                    "entrances": entrances_count,
                    "entrance_info": entrance_info,
                    "zone_id": zone.id if zone else None,
                    "notes": f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å 2–ì–ò–°. –ê–¥—Ä–µ—Å: {info.get('address')}"
                }
            )

            await state.set_state(FindHouseFSM.confirming_add)
            return

        else:
            entrances = await get_entrances_by_house(session, house.id)

    entrances_data = []
    for entrance in entrances:
        flats_range = entrance.flats_text or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        entrances_data.append({
            'entrance_number': entrance.entrance_number,
            'floors': entrance.floors or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'flats_range': flats_range
        })

    text = build_house_address_info(
        city_name=house.zone.city.name,
        zone_name=house.zone.name,
        street=house.street,
        house_number=house.house_number,
        floors=house.floors,
        entrances=house.entrances,
        entrance_info={e['entrance_number']: e['flats_range'] for e in entrances_data},
        notes=house.notes,
        updated_at=house.updated_at.strftime("%d.%m.%Y %H:%M")
    )

    await message.answer(text, reply_markup=get_list_gks_menu())
    await state.clear()
