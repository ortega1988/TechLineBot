import logging
from db.db import db

logger = logging.getLogger(__name__)

async def init_database():
    try:
        async with db.pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS roles (
                        id TINYINT PRIMARY KEY,
                        name VARCHAR(100) NOT NULL,
                        description TEXT
                    )
                """)
                
                # –§–∏–ª–∏–∞–ª—ã
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS branches (
                        id TINYINT PRIMARY KEY,              
                        name VARCHAR(100) NOT NULL           
                    )
                """)
                
                # –£—á–∞—Å—Ç–∫–∏
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS areas (
                        id VARCHAR(10) PRIMARY KEY,          
                        name VARCHAR(100) NOT NULL,          
                        branch_id TINYINT NOT NULL,          
                        FOREIGN KEY (branch_id) REFERENCES branches(id)
                    )
                """)

                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,                        -- Telegram ID
                        full_name VARCHAR(255),                       -- –§–ò–û
                        username VARCHAR(50),                         -- –ù–∏–∫–Ω–µ–π–º
                        phone VARCHAR(20),                            -- –¢–µ–ª–µ—Ñ–æ–Ω
                        area_id VARCHAR(10),                          -- –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —É—á–∞—Å—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 16.2)
                        temp_area_id VARCHAR(10),                     -- –í—Ä–µ–º–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ (–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞)
                        branch_id TINYINT,                            -- –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–µ—Å—å —Ñ–∏–ª–∏–∞–ª
                        role_id TINYINT NOT NULL,                     -- –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
                        is_active TINYINT(1) DEFAULT 1,               -- –ê–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        notes TEXT,

                        FOREIGN KEY (role_id) REFERENCES roles(id),
                        FOREIGN KEY (area_id) REFERENCES areas(id),
                        FOREIGN KEY (temp_area_id) REFERENCES areas(id),
                        FOREIGN KEY (branch_id) REFERENCES branches(id)
                    )
                """)
                
                logger.info("üß± –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

                # –†–æ–ª–∏
                await cur.execute("SELECT COUNT(*) FROM roles")
                count = (await cur.fetchone())[0]
                if count == 0:
                    await cur.executemany("""
                        INSERT INTO roles (id, name, description) VALUES (%s, %s, %s)
                    """, [
                        (0, "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
                        (1, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞"),
                        (2, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã –ö–°", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
                        (3, "–°—Ç–∞—Ä—à–∏–π –∏–Ω–∂–µ–Ω–µ—Ä", "–ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"),
                        (50, "–ù–æ–≤—á–∏–µ–∫", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É"),
                    ])
                    logger.info("üéØ –†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
